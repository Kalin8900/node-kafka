{
  "extends": "@tsconfig/node22/tsconfig.json",
  "compileOnSave": false,
  "compilerOptions": {
    "incremental": true /* Save .tsbuildinfo files to allow for incremental compilation of projects. */,
    "emitDecoratorMetadata": true /* Emit design-type metadata for decorated declarations in source files. */,
    "experimentalDecorators": true /* Enable experimental support for legacy experimental decorators. */,
    "importHelpers": true /* Allow importing helper functions from tslib once per project, instead of including them per-file. */,
    "skipDefaultLibCheck": true /* Skip type checking .d.ts files that are included with TypeScript. */,
    "sourceMap": true /* Create source map files for emitted JavaScript files. */,
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "declarationMap": true /* Create sourcemaps for d.ts files. */,
    "types": [
      "jest",
      "node"
    ] /* Specify type package names to be included without being referenced in a source file. */,
    "resolveJsonModule": true /* Enable importing .json files. */,
    "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
    "noImplicitThis": false /* Enable error reporting when 'this' is given the type 'any'. */,
    "useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any'. */,
    "alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
    "noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
    "noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
    "exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
    "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
    "noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,
    "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
    "strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
    "pretty": true
  }
}
